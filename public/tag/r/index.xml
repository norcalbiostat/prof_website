<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Dr. D.</title>
    <link>/tag/r/</link>
      <atom:link href="/tag/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© Robin Donatello, 2020</copyright><lastBuildDate>Thu, 13 Sep 2018 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_huf04b1cfef9bd3535e59178ed913aa604_851_512x512_fill_lanczos_center_2.png</url>
      <title>R</title>
      <link>/tag/r/</link>
    </image>
    
    <item>
      <title>Using dplyr and foreach to read in multiple data sets from disk</title>
      <link>/post/2018-09-13-using-dplyr-and-foreach/</link>
      <pubDate>Thu, 13 Sep 2018 00:00:00 +0000</pubDate>
      <guid>/post/2018-09-13-using-dplyr-and-foreach/</guid>
      <description>


&lt;p&gt;I had a student (Jack Fogliasso) bring me a problem from a Microbiology lab where they are trying to identify bacteria using lasers. One of the items they wanted to understand was the absorption rates of different wavelengths. So they have a machine to do the lasering and it reads out a text file that of course has a ton of meta data in it, is semi-colon delimited, and there’s one file per trial. So not the standard situation that one might encounter in a basic applied statistics class.&lt;/p&gt;
&lt;p&gt;Jack and I talked about automation and reproducibility and how R is great for tasks like this, and he got to work. What is shown below is an effective use of &lt;code&gt;dplyr&lt;/code&gt; and to read in a data set from disk, do some processing, and create a visualization. This process can be expanded to any number of files thanks to the efficient looping of &lt;code&gt;foreach&lt;/code&gt;, and the combination of &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt; can accommodate different file names, such as for different new bacteria.&lt;/p&gt;
&lt;hr /&gt;
&lt;div id=&#34;system-setup&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;System setup&lt;/h1&gt;
&lt;p&gt;This example uses the &lt;code&gt;ggplot2&lt;/code&gt;, &lt;code&gt;dplyr&lt;/code&gt; and &lt;code&gt;foreach&lt;/code&gt; packages.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;knitr::opts_chunk$set(echo = TRUE, warning=FALSE, message=FALSE)
library(ggplot2)
library(dplyr)
library(foreach)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-import&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data import&lt;/h1&gt;
&lt;p&gt;Read in the data for the three experimental trials.&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;get all .txt files in the working directory and put into a list.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;list_files &amp;lt;- list.files(pattern = &amp;quot;.txt&amp;quot;, full.names = TRUE) 
list_files&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;./Ec1.txt&amp;quot; &amp;quot;./Ec2.txt&amp;quot; &amp;quot;./Ec3.txt&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Use the &lt;code&gt;%do%&lt;/code&gt; function in the &lt;code&gt;foreach&lt;/code&gt; package to efficiently loop over all items in the list.
This read in the data using &lt;code&gt;read.delim&lt;/code&gt;, turns it into a data frame, so that we can add the file name to the data set before combining each data set using &lt;code&gt;rbind&lt;/code&gt; (stacking or concatonating).&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eColi &amp;lt;- foreach(i=1:length(list_files), .combine=rbind) %do% {
            read.delim(list_files[[i]], skip=66, sep=&amp;quot;;&amp;quot;) %&amp;gt;%
            data.frame() %&amp;gt;%
            mutate(file=gsub(&amp;quot;.txt&amp;quot;, &amp;quot;&amp;quot;, list_files[[i]]))# add an identifier to index each trial
}
head(eColi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Pixel Wavelength    Dark Reference Raw.data..1 Dark.Subtracted..1 X.TR..1
## 1     0     349.84 1161.60   1266.60     1257.96              96.36 91.7714
## 2     1     350.27 1160.72   1263.56     1258.04              97.32 94.6324
## 3     2     350.71 1161.20   1262.84     1259.56              98.36 96.7729
## 4     3     351.14 1158.96   1264.04     1256.76              97.80 93.0719
## 5     4     351.58 1150.24   1259.64     1252.12             101.88 93.1261
## 6     5     352.01 1144.08   1256.92     1243.72              99.64 88.3020
##   Absorbance..1 Raw.data..2 Dark.Subtracted..2 X.TR..2 Absorbance..2
## 1        0.0373           0                  0       0             0
## 2        0.0240           0                  0       0             0
## 3        0.0142           0                  0       0             0
## 4        0.0312           0                  0       0             0
## 5        0.0309           0                  0       0             0
## 6        0.0540           0                  0       0             0
##   Raw.data..3 Dark.Subtracted..3 X.TR..3 Absorbance..3 Lamp.FitCurve
## 1           0                  0       0             0             0
## 2           0                  0       0             0             0
## 3           0                  0       0             0             0
## 4           0                  0       0             0             0
## 5           0                  0       0             0             0
## 6           0                  0       0             0             0
##   Irradiance.Ratio Irradiance_1.W.cm.2.nm. Irradiance_2.W.cm.2.nm.
## 1                0                      NA                       0
## 2                0                      NA                       0
## 3                0                      NA                       0
## 4                0                      NA                       0
## 5                0                      NA                       0
## 6                0                      NA                       0
##   Irradiance_3.W.cm.2.nm.  file
## 1                       0 ./Ec1
## 2                       0 ./Ec1
## 3                       0 ./Ec1
## 4                       0 ./Ec1
## 5                       0 ./Ec1
## 6                       0 ./Ec1&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;3&#34; style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Shorten the names to something reasonable.&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;names(eColi)[c(5:16,19:21)] &amp;lt;- paste0(rep(c(&amp;quot;raw&amp;quot;, &amp;quot;dark&amp;quot;, &amp;quot;X&amp;quot;, &amp;quot;abs&amp;quot;, &amp;quot;irr&amp;quot;),3), 1:3)
names(eColi)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;Pixel&amp;quot;            &amp;quot;Wavelength&amp;quot;       &amp;quot;Dark&amp;quot;             &amp;quot;Reference&amp;quot;       
##  [5] &amp;quot;raw1&amp;quot;             &amp;quot;dark2&amp;quot;            &amp;quot;X3&amp;quot;               &amp;quot;abs1&amp;quot;            
##  [9] &amp;quot;irr2&amp;quot;             &amp;quot;raw3&amp;quot;             &amp;quot;dark1&amp;quot;            &amp;quot;X2&amp;quot;              
## [13] &amp;quot;abs3&amp;quot;             &amp;quot;irr1&amp;quot;             &amp;quot;raw2&amp;quot;             &amp;quot;dark3&amp;quot;           
## [17] &amp;quot;Lamp.FitCurve&amp;quot;    &amp;quot;Irradiance.Ratio&amp;quot; &amp;quot;X1&amp;quot;               &amp;quot;abs2&amp;quot;            
## [21] &amp;quot;irr3&amp;quot;             &amp;quot;file&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data-processing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Data Processing&lt;/h1&gt;
&lt;p&gt;Create the average absorbance of the 3 trials per wave length.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;eColi_abs &amp;lt;- eColi %&amp;gt;% group_by(Wavelength) %&amp;gt;% summarise(avgRelAbs = mean(abs1))
head(eColi_abs)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## # A tibble: 6 x 2
##   Wavelength avgRelAbs
##        &amp;lt;dbl&amp;gt;     &amp;lt;dbl&amp;gt;
## 1       350.    0.0453
## 2       350.    0.0353
## 3       351.    0.0382
## 4       351.    0.0562
## 5       352.    0.0621
## 6       352.    0.0713&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;analyzing&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Analyzing&lt;/h1&gt;
&lt;p&gt;Plot the average relative absorbance for the E. coli.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(eColi_abs, aes(x=Wavelength, y=avgRelAbs)) + 
              geom_point(color=&amp;quot;#CC0000&amp;quot;) + geom_smooth(color=&amp;quot;black&amp;quot;) + 
              labs(title=&amp;quot;Average Relative Absorbance of E. Coli&amp;quot;, 
                   x=&amp;quot;Wavelength (nm)&amp;quot;, y=&amp;quot;Absorbance&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2018-09-13-using-dplyr-and-foreach/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Fancifying Excel tables in R Markdown with kable_extra</title>
      <link>/post/2017-07-20-fancifying-excel-tables-in-r-markdown-with-kable-extra/</link>
      <pubDate>Thu, 20 Jul 2017 00:00:00 +0000</pubDate>
      <guid>/post/2017-07-20-fancifying-excel-tables-in-r-markdown-with-kable-extra/</guid>
      <description>


&lt;p&gt;I’m a big fan of automating all the things. Especially when it comes to teaching materials.
I build my own course websites for each class I teach, where I post lecture materials, due
dates and links to external resources. Posting it online instead of my campus’s LMS makes
the materials accessible to not only my current students, but past and future students as well.&lt;/p&gt;
&lt;p&gt;I need a schedule, so do my students. I’m not good at winging things. I want to know what’s
coming up this week, and next so I can plan my time accordingly. Again, so do my students.
The easiest way for me to manage a schedule of topics, assignments, exams, projects for an
entire 16 week class (or more) is in Excel, but that’s far from web-ready.&lt;/p&gt;
&lt;p&gt;This is a record of how I turned an Excel sheet into a nicely formatted web-ready schedule
using &lt;code&gt;RMarkdown&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is the structure of my excel file. Week number, date, day of the week, the topics
we’re covering, what the students can do to prep for class, what i’m going to evaluate them
on (HW, exams), and notes about the assignment. Things in green are for my eyes only.
Note the asterisk between items in the cells. The line breaks are for easy visual separation of
items in a list, the asterisk will be used in code to create a formal html list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../../img/excel_schedule.PNG&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So first let’s load the necessary libraries and set options for &lt;code&gt;kable&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(dplyr);library(readxl); library(kableExtra); library(stringr)
options(knitr.table.format = &amp;quot;html&amp;quot;, knitr.kable.NA = &amp;#39;&amp;#39;) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Read the data into &lt;code&gt;rawdat&lt;/code&gt;, reformat the date, make copies of the columns that need list
processing: &lt;code&gt;topic, prep, eval&lt;/code&gt;. The filter is leftover from the Spring semester, after each
exam I hide the weeks prior to that exam so that the most current and upcoming weeks are
presented at the top of the table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rawdat &amp;lt;- read_excel(&amp;quot;schedule_615.xlsx&amp;quot;)
cdat   &amp;lt;- rawdat %&amp;gt;% mutate(Date = format(date, &amp;quot;%m/%d&amp;quot;), 
                            Topics = topic, Preparation = prep, Evaluation = eval) %&amp;gt;% 
              filter(as.Date(date) &amp;gt; &amp;quot;2017-04-01&amp;quot;) %&amp;gt;%
              select(Wk, Date, Topics, Preparation, Evaluation, topic, prep, eval)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;First I find the rows that have some content in them, store this as &lt;code&gt;topiclist&lt;/code&gt;. This
ensures that I don’t get a list of &lt;code&gt;*NA&lt;/code&gt;’s.&lt;/li&gt;
&lt;li&gt;Then I turn those three columns into formal html lists. I &lt;code&gt;paste0&lt;/code&gt; the content of &lt;code&gt;topic&lt;/code&gt; between
starting &lt;code&gt;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&lt;/code&gt; and ending &lt;code&gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&lt;/code&gt; tags.&lt;/li&gt;
&lt;li&gt;Lastly I use &lt;code&gt;str_replace&lt;/code&gt; from the &lt;code&gt;stringr&lt;/code&gt; package to replace the asterisk between list items
with `
&lt;/li&gt;
&lt;li&gt;
to end the first list item and start a second. Notice that there is no asterisk
in the excel file in front of the first list item.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# parse topics - same code for all three vars. Yes I could have applied a function. 
topiclist &amp;lt;- which(!is.na(cdat$topic))
cdat$Topics[topiclist] &amp;lt;- paste0(&amp;quot;&amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;quot;, cdat$topic[topiclist], &amp;quot;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&amp;quot;)
cdat$Topics[topiclist] &amp;lt;- str_replace(cdat$Topics[topiclist], &amp;quot;\\*&amp;quot;, &amp;#39;&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now I clean up the data frame using &lt;code&gt;select&lt;/code&gt; from &lt;code&gt;dplyr&lt;/code&gt; to only the variables I want to show,
in the order I want to show. Then wrap &lt;code&gt;kable&lt;/code&gt; on the entire table.
* &lt;code&gt;escape=FALSE&lt;/code&gt; is needed to process the html tags
* &lt;code&gt;kable_styling&lt;/code&gt; adds some very nice customizations to the table, including a non-custom css
method to adjust column spacing and row shading behavior using &lt;code&gt;hover, striped&lt;/code&gt; and &lt;code&gt;responsive&lt;/code&gt;
so that the table maintains it’s width on a cell phone, but lets you scroll to the side to
see the whole table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;out &amp;lt;- select(cdat, Wk, Date, Topics, Preparation, Evaluation)

knitr::kable(out, align=&amp;quot;l&amp;quot;, escape=FALSE) %&amp;gt;% 
  kable_styling(bootstrap_options = c(&amp;quot;hover&amp;quot;, &amp;quot;striped&amp;quot;, &amp;quot;responsive&amp;quot;)) %&amp;gt;% 
  column_spec(1, width=&amp;quot;1%&amp;quot;) %&amp;gt;% column_spec(2, width=&amp;quot;1%&amp;quot;) %&amp;gt;%
  column_spec(3, width=&amp;quot;20%&amp;quot;) %&amp;gt;% column_spec(4, width=&amp;quot;30%&amp;quot;) %&amp;gt;%
  column_spec(5, width=&amp;quot;30%&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The results can be seen on my &lt;a href=&#34;https://norcalbiostat.github.io/MATH615/schedule.html&#34;&gt;MATH 615 course website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;kable_extra&lt;/code&gt; can apply a lot of neat table customization features that make creating professional tables in
R markdown an actual possibility (without switching to &lt;span class=&#34;math inline&#34;&gt;\(\LaTeX\)&lt;/span&gt;\Sweave)
I highly recommend you checking it out &lt;a href=&#34;http://haozhu233.github.io/kableExtra/&#34; class=&#34;uri&#34;&gt;http://haozhu233.github.io/kableExtra/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Having a nice automated framework like this makes my day-to-day life during the semester much easier.
I just copy the &lt;code&gt;schedule.Rmd&lt;/code&gt; file into another class’s repo and just change the excel file that
is read in. Make adjustments to the excel file as needed, rebuild and git push.
(Typically 5 min before class to fix a typo)&lt;/p&gt;
&lt;div id=&#34;session-info&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Session Info&lt;/h1&gt;
&lt;p&gt;Note that since i’m using blogdown to write this post, many more packages are loaded than what is necessary
for the topic of this post.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sessionInfo()&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## R version 4.0.0 (2020-04-24)
## Platform: x86_64-w64-mingw32/x64 (64-bit)
## Running under: Windows 10 x64 (build 18362)
## 
## Matrix products: default
## 
## locale:
## [1] LC_COLLATE=English_United States.1252 
## [2] LC_CTYPE=English_United States.1252   
## [3] LC_MONETARY=English_United States.1252
## [4] LC_NUMERIC=C                          
## [5] LC_TIME=English_United States.1252    
## 
## attached base packages:
## [1] stats     graphics  grDevices utils     datasets  methods   base     
## 
## other attached packages:
## [1] stringr_1.4.0    kableExtra_1.1.0 readxl_1.3.1     dplyr_1.0.0     
## 
## loaded via a namespace (and not attached):
##  [1] Rcpp_1.0.4.6      rstudioapi_0.11   xml2_1.3.2        knitr_1.28       
##  [5] magrittr_1.5      hms_0.5.3         munsell_0.5.0     rvest_0.3.5      
##  [9] tidyselect_1.1.0  viridisLite_0.3.0 colorspace_1.4-1  R6_2.4.1         
## [13] rlang_0.4.6       httr_1.4.1        tools_4.0.0       webshot_0.5.2    
## [17] xfun_0.14         htmltools_0.4.0   ellipsis_0.3.1    yaml_2.2.1       
## [21] digest_0.6.25     tibble_3.0.1      lifecycle_0.2.0   crayon_1.3.4     
## [25] bookdown_0.20     readr_1.3.1       purrr_0.3.4       vctrs_0.3.0      
## [29] glue_1.4.1        evaluate_0.14     rmarkdown_2.3     blogdown_0.20    
## [33] stringi_1.4.6     cellranger_1.1.0  compiler_4.0.0    pillar_1.4.4     
## [37] scales_1.1.1      generics_0.0.2    pkgconfig_2.0.3&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
